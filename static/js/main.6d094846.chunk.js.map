{"version":3,"sources":["component/header.jsx","component/body.jsx","component/homepage.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","state","Navbar","className","fixed","Nav","Link","href","Component","Body","style","alignContent","textAlign","fontSize","fontWeight","paddingTop","paddingBottom","src","alt","width","height","marginBottom","Button","viewBox","class","fill","xmlns","fill-rule","d","Homepage","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PAsBeA,E,4MAlBXC,MAAQ,G,uDAEJ,OACI,kBAACC,EAAA,EAAD,CAAQC,UAAY,0BAA0BC,MAAQ,OAClD,kBAACC,EAAA,EAAD,CAAKF,UAAY,WACb,kBAACE,EAAA,EAAIC,KAAL,CAAUC,KAAO,SAAjB,QACA,kBAACF,EAAA,EAAIC,KAAL,CAAUC,KAAO,SAAjB,QACA,kBAACF,EAAA,EAAIC,KAAL,CAAUC,KAAO,SAAjB,UAEJ,kBAACF,EAAA,EAAD,KACI,kBAACA,EAAA,EAAIC,KAAL,CAAUC,KAAK,0CAAf,YACA,kBAACF,EAAA,EAAIC,KAAL,CAAUC,KAAK,iCAAf,kB,GAZCC,a,QC2CNC,E,4MA1CXR,MAAQ,G,uDAmBJ,OACI,yBAAKE,UAAY,wBAAwBO,MAlBhC,CACTC,aAAc,SACdC,UAAW,SACXC,SAAU,SACVC,WAAY,MACZC,WAAY,QACZC,cAAe,SAaX,yBAAKb,UAAY,+BAA+Bc,IAAM,kCAAkCC,IAAM,gBAAgBR,MAPxG,CACVS,MAAO,QACPC,OAAQ,QACRC,aAAc,UAKV,wBAAIX,MAZD,CACPG,SAAU,SACVC,WAAY,QAUR,wCAEA,6BACA,sNAGA,6BACA,6BACA,kBAACQ,EAAA,EAAD,CAAQnB,UAAY,uBAApB,kBACA,6BACA,6BACA,6BACA,yBAAKgB,MAAM,QAAQC,OAAO,QAAQG,QAAQ,YAAYC,MAAM,qBAAqBC,KAAK,eAAeC,MAAM,8BACvG,0BAAMC,YAAU,UAAUC,EAAE,iI,GApC7BpB,a,QCGEqB,E,uKAEf,OACE,kBAACC,EAAA,EAAD,CAAW3B,UAAY,+BACnB,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAL0BK,aCQvBuB,MATf,WACE,OACE,yBAAK5B,UAAY,eACf,kBAAC,EAAD,QCIc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6d094846.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nclass Header extends Component {\n    state = {  }\n    render() { \n        return (\n            <Navbar className = \"navbar navbar-expand-lg\" fixed = \"top\" >\n                <Nav className = \"mr-auto\">\n                    <Nav.Link href = \"#home\">home</Nav.Link>\n                    <Nav.Link href = \"#work\">work</Nav.Link>\n                    <Nav.Link href = \"#work\">about</Nav.Link>\n                </Nav>\n                <Nav>\n                    <Nav.Link href=\"https://www.linkedin.com/in/samitbarai\">linkedin</Nav.Link>\n                    <Nav.Link href=\"https://dribbble.com/samit403\">dribbble</Nav.Link>\n                </Nav>\n            </Navbar>\n        ) \n    }\n}\n \nexport default Header;","import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\n\nclass Body extends Component {\n    state = {  }\n    render() {\n        const body = {\n            alignContent: \"center\", \n            textAlign: \"center\",\n            fontSize: \"1.2rem\",\n            fontWeight: \"100\",\n            paddingTop: \"150px\",\n            paddingBottom: \"40px\"\n        };\n        const h1 = {\n            fontSize: \"3.2rem\",\n            fontWeight: \"800\"\n        };\n        const image = {\n            width: \"200px\",\n            height: \"200px\",\n            marginBottom: \"40px\"\n        };\n        return (\n            <div className = \"container bg bg-light\" style = {body}>\n                <img className = \"img-thumbnail rounded-circle\" src = \"https://i.imgur.com/nY3VOK3.png\" alt = \"profile-samit\" style = {image}/>\n                <h1 style = {h1}>Hi! I am Samit Barai - PM in Design.\n                </h1>\n                <br/>\n                <p>\n                    I have 6+ years of experience in Consulting, Product Management and Product Design. Currently I am working with a Payments startup - Juspay Technologies, based out of Bangalore, India\n                </p>\n                <br/>\n                <br/>\n                <Button className = \"btn btn-lg btn-dark\">View Portfolio</Button>\n                <br/>\n                <br/>\n                <br/>\n                <svg width=\"1.2em\" height=\"1.2em\" viewBox=\"0 0 16 16\" class=\"bi bi-chevron-down\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path fill-rule=\"evenodd\" d=\"M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z\"/>\n                </svg>\n            </div>\n        );\n    }\n}\n \nexport default Body;","import React, { Component } from 'react';\nimport Header from './header';\nimport Body from './body';\nimport { Container } from 'react-bootstrap';\n// import Footer from './footer';\n\nexport default class Homepage extends Component {\n    render() {\n      return (\n        <Container className = \"bg bg-light container-fluid\">\n            <Header />\n            <Body />\n            {/* <Footer /> */}\n        </Container>\n      )\n    }\n  }","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Homepage from './component/homepage';\n\nfunction App() {\n  return (\n    <div className = \"bg bg-light\" >\n      <Homepage />\n    </div>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}